version: "3.9"

services:
  # postgres
  postgres:
    container_name: aat-postgres
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    healthcheck:
      test: [ 'CMD', 'psql', '-U', 'postgres', '-c', 'SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - aat-postgres:/var/lib/postgresql/data
    networks:
      - aat-network

  # minio
  minio:
    container_name: aat-minio
    image: minio/minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT}:9000"
      - "9001:9001"
    volumes:
      - minio-storage:/data
    environment:
      MINIO_ACCESS_KEY: blQ3xwyhmgVSil41otTG
      MINIO_SECRET_KEY: bnlnY6BYVls7BVOIAhj7LUKF5htiTRkJG4RhdMQJ
    command: server --console-address ":9001" /data
    networks:
      - aat-network

  # redis
  redis:
    container_name: aat-redis
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --loglevel warning
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - aat-network

  # zookeeper
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    container_name: aat-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      SERVER_ID: "1"
      SERVER_COUNT: "1"
      LOG_LEVEL: "WARN"
    networks:
      - aat-network

  # kafka
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    container_name: aat-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "${KAFKA_PORT}:9092"
      - "29092:29092"
    environment:
      NODE_ID: "1"
      ZOOKEEPER_CONNECT: "aat-zookeeper:2181"
      LOG_LEVEL: "WARN"
      KAFKA_LOG_RETENTION_HOURS: "1"
      KAFKA_LISTENERS: "PLAINTEXT://aat-kafka:29092,PLAINTEXT_HOST://aat-kafka:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://aat-kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CREATE_TOPICS: "debezium_connect_config:1:1:compact,debezium_connect_offsets:1:1:compact,debezium_connect_status:1:1:compact"
    healthcheck:
      test:
        [
          "CMD",
          "./bin/kafka-topics.sh",
          "--list",
          "--bootstrap-server",
          "aat-kafka:29092"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aat-network

  # kafka ui
  kafka-ui:
    container_name: aat-kafka-ui
    image: tchiotludo/akhq:0.24.0
    restart: unless-stopped
    ports:
      - "8088:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "aat-kafka:29092"
          ui-options:
            topic-data:
              sort: NEWEST
    depends_on:
      - kafka
    networks:
      - aat-network

  # debezium
  debezium:
    image: debezium/connect:${DEBEZIUM_VERSION}
    container_name: aat-debezium
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${DEBEZIUM_PORT}:8083"
    environment:
      BOOTSTRAP_SERVERS: "aat-kafka:29092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "debezium_connect_config"
      OFFSET_STORAGE_TOPIC: "debezium_connect_offset"
      STATUS_STORAGE_TOPIC: "debezium_connect_status"
      LOG_LEVEL: "WARN"
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aat-network

  # debezium ui
  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: aat-debezium-ui
    restart: unless-stopped
    ports:
      - "6969:8080"
    environment:
      KAFKA_CONNECT_URIS: "http://aat-debezium:8083"
    depends_on:
      debezium:
        condition: service_healthy
    networks:
      - aat-network

volumes:
  aat-postgres:
    driver: local
  minio-storage: { }

networks:
  aat-network:
    driver: bridge